---
description: 
globs: 
alwaysApply: true
---

# Your rule content

Updated minimum code guidelines:

1. **No Classes**: Function-based implementation only
2. **Variable Names**: Single lowercase letters (a, b, c, ...)
3. **Function Names**: UPPERCASE letters, max 5 characters
4. **Line Reduction**: Multiple operations per line
5. **Avoid Nesting**: Minimize nested statements
6. **Modules**: Use standard library, import with initials (`import numpy as n`)
7. **Operators**: Use shorthand (`x+=1`)
8. **Comments**: Only when necessary, single line
9. **Tuple Unpacking**: Use simultaneous assignment (`a,b=1,2`)
10. **One-liners**: Prefer list comprehensions and ternary operators
11. **Return Values**: Use tuples for multiple returns
12. **Arguments**: Position-only arguments

# 開発ルールと設計ガイドライン

## 1. 生成AIクライアント使用ルール

### 基本ルール
- **必ず`GeminiClient`を使用する**：新たなAI APIクライアントを作成せず、既存の`GeminiClient`クラスを拡張する
- **`OpenAI`のような他のAI APIは使用禁止**：すべての生成AI機能は`GeminiClient`経由で実装する

### インターフェース
- **テキスト生成には`text_analysis`メソッドを使用する**
- **画像解析には`analyze_image`メソッドを使用する**
- **新機能が必要な場合は`GeminiClient`クラスに追加する**

### エラーハンドリング
- **APIエラーは`GeminiClient`内で処理し、意味のある値を返す**
- **`text_analysis`の失敗時は空のJSON文字列`"{}"`を返す**
- **呼び出し側でJSONパースエラーを適切に処理する**

## 2. コーディング規約

### 命名規則
- **クラス名**: キャメルケース（例：`GeminiClient`）
- **メソッド名**: スネークケース（例：`text_analysis`）
- **プライベートメソッド**: アンダースコア接頭辞（例：`_format_contents_summary`）

### ファイル構成
- **モジュールごとに1つのクラス**を実装する
- **各クラスは単一責任の原則に従う**
- **共通機能は適切なユーティリティクラスに配置する**

### 型ヒント
- **すべての関数とメソッドには型ヒントを付ける**
- **複雑な型は`typing`モジュールを使用する**（例：`List[Dict[str, Any]]`）

## 3. 生成AIプロンプト設計

### 基本規則
- **プロンプトは明確な指示と出力形式の指定を含める**
- **JSONレスポースを要求するプロンプトには必ず出力形式のサンプルを含める**
- **日本語プロンプトを使用する**
- **プロンプトは単一責任を持つ**

### レスポンス処理
- **JSONレスポンスのパースエラーに対するフォールバック処理を必ず実装する**
- **特定のキーが存在しない場合のデフォルト値を適切に設定する**
- **レスポンスの検証を行い、不正なデータは修正するか警告を表示する**

## 4. テスト規約

### テスト構造
- **各クラスには対応するテストファイルを作成する**
- **モック化されたAPIレスポンスを使用してテストする**
- **エラーケースも必ずテストする**

### 継続的インテグレーション
- **すべての変更はテストが成功することを確認してからマージする**
- **新機能の追加時は対応するテストケースも追加する**

## 5. 依存関係管理

### パッケージ管理
- **すべての依存関係は`requirements.txt`に明記する**
- **バージョン番号を指定する**（例：`google-generativeai>=0.3.0`）
- **開発依存関係は`requirements-dev.txt`に記載する**

### 環境変数
- **APIキーなどの機密情報は環境変数で管理する**
- **環境変数は`.env`ファイルを使用して管理する**
- **`.env`ファイルはバージョン管理対象外とする**

## 6. 設定ファイル

### フォーマット
- **設定ファイルはJSON形式で記述する**
- **文字コードはUTF-8 with BOMとする**
- **改行コードはLFに統一する**

### パラメータ命名
- **API設定は`api_`プレフィックスを使用する**
- **パラメータは明示的な名前を使用する**（例：`input_dir`ではなく`input_directory`） 